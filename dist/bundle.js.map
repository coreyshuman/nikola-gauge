{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://nikola-gauge/./build-babel/Common/Timer.js","webpack://nikola-gauge/./build-babel/Common/Tuple.js","webpack://nikola-gauge/./build-babel/Common/Util.js","webpack://nikola-gauge/./build-babel/Drivers/Context2DDriver.js","webpack://nikola-gauge/./build-babel/Font/Font.js","webpack://nikola-gauge/./build-babel/Gauge/Canvas.js","webpack://nikola-gauge/./build-babel/Gauge/Gauge.js","webpack://nikola-gauge/./build-babel/Gradient/Gradient.js","webpack://nikola-gauge/webpack/bootstrap","webpack://nikola-gauge/./build-babel/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Timer = void 0;\nconst INVALID_HANDLE = -1;\nclass Timer {\n    constructor(interval, eventHandler, enabled) {\n        this.interval = interval;\n        this.handle = INVALID_HANDLE;\n        this.eventHandler = eventHandler !== null && eventHandler !== void 0 ? eventHandler : null;\n        this.Enabled = eventHandler && enabled;\n        console.log('timer ' + interval + ' ' + this.enabled);\n    }\n    get Interval() {\n        return this.interval;\n    }\n    set Interval(interval) {\n        this.interval = interval;\n    }\n    get Enabled() {\n        return this.enabled;\n    }\n    set Enabled(enabled) {\n        this.enabled = enabled;\n        enabled ? this.startTimer() : this.endTimer();\n    }\n    set EventHandler(eventHandler) {\n        this.eventHandler = eventHandler;\n    }\n    startTimer() {\n        if (this.handle > 0) {\n            this.endTimer();\n        }\n        if (this.eventHandler !== null) {\n            this.handle = window.setInterval(this.eventHandler, this.interval);\n        }\n    }\n    endTimer() {\n        if (this.handle > 0) {\n            window.clearInterval(this.handle);\n            this.handle = INVALID_HANDLE;\n        }\n    }\n    static getTicks() {\n        return Date.now();\n    }\n    static getTicksDiff(ticks) {\n        return Date.now() - ticks;\n    }\n}\nexports.Timer = Timer;\nexports.default = Timer;\n//# sourceMappingURL=Timer.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tuple = void 0;\nclass Tuple {\n    constructor(val1, val2) {\n        this.v1 = val1;\n        this.v2 = val2;\n    }\n}\nexports.Tuple = Tuple;\nexports.default = Tuple;\n//# sourceMappingURL=Tuple.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Util = void 0;\nclass Util {\n    // conver degrees to radians\n    static d2r(degree) {\n        return degree * Math.PI / 180;\n    }\n}\nexports.Util = Util;\n//# sourceMappingURL=Util.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Context2DDriver = void 0;\nconst Util_1 = require(\"../Common/Util\");\n// example driver for html canvas implementation.\n// \"ctx\" is our drawing context\nclass Context2DDriver {\n    constructor(ctx, width, height) {\n        this.ctx = ctx;\n        this.width = width;\n        this.height = height;\n        // workaround to undo pseudo-transparency caused by anti-aliasing\n        this.ctx.translate(0.5, 0.5);\n    }\n    fillCanvas(gradient) {\n        const ctxGradient = gradient.radial ? this.ctx.createRadialGradient(gradient.x0, gradient.y0, gradient.r0, gradient.x1, gradient.y1, gradient.r1) : this.ctx.createLinearGradient(gradient.x0, gradient.y0, gradient.x1, gradient.y1);\n        gradient.colorStops.forEach(stop => {\n            ctxGradient.addColorStop(stop.offset, stop.color);\n        });\n        this.ctx.fillStyle = ctxGradient;\n        this.ctx.fillRect(0, 0, this.width, this.height);\n    }\n    drawLine(x0, y0, x1, y1, color, thickness) {\n        this.ctx.beginPath();\n        this.ctx.strokeStyle = color;\n        this.ctx.fillStyle = color;\n        this.ctx.lineWidth = thickness;\n        this.ctx.globalAlpha = 1;\n        this.ctx.moveTo(x0, y0);\n        this.ctx.lineTo(x1, y1);\n        this.ctx.stroke();\n    }\n    drawArc(x, y, radius, startAngle, endAngle, color, thickness) {\n        this.ctx.beginPath();\n        this.ctx.strokeStyle = color;\n        this.ctx.fillStyle = color;\n        this.ctx.lineWidth = thickness;\n        this.ctx.arc(x, y, radius, Util_1.Util.d2r(startAngle), Util_1.Util.d2r(endAngle), false);\n        this.ctx.stroke();\n    }\n    writeText(x, y, font, color, text) {\n        this.ctx.strokeStyle = color;\n        this.ctx.fillStyle = color;\n        this.ctx.font = `${font.weight} ${font.fontsize} ${font.typename}`;\n        this.ctx.fillText(text, x, y);\n    }\n}\nexports.Context2DDriver = Context2DDriver;\n//# sourceMappingURL=Context2DDriver.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Font = void 0;\nclass Font {\n    constructor(typename, fontsize, weight = 'normal') {\n        this.typename = typename;\n        this.fontsize = fontsize;\n        this.weight = weight;\n        // could add validation here\n    }\n}\nexports.Font = Font;\n//# sourceMappingURL=Font.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Canvas = void 0;\n// Middleware file to integrate gauge logic with underlying driver implementations\nclass Canvas {\n    constructor(driver) {\n        this.driver = driver;\n    }\n    get width() {\n        return this.driver.width;\n    }\n    get height() {\n        return this.driver.height;\n    }\n    // fill background\n    fillCanvas(gradient) {\n        this.driver.fillCanvas(gradient);\n    }\n    drawLine(x0, y0, x1, y1, color, thickness) {\n        this.driver.drawLine(x0, y0, x1, y1, color, thickness);\n    }\n    drawArc(x, y, radius, startAngle, endAngle, color, thickness) {\n        this.driver.drawArc(Math.round(x), Math.round(y), Math.ceil(radius), startAngle, endAngle, color, Math.ceil(thickness));\n    }\n    writeText(x, y, font, color, text) {\n        this.driver.writeText(x, y, font, color, text);\n    }\n}\nexports.Canvas = Canvas;\n//# sourceMappingURL=Canvas.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Gradient_1 = require(\"../Gradient/Gradient\");\nconst Font_1 = require(\"../Font/Font\");\nconst Tuple_1 = require(\"../Common/Tuple\");\nconst Util_1 = require(\"../Common/Util\");\nconst Canvas_1 = require(\"./Canvas\");\nconst Timer_1 = require(\"../Common/Timer\");\nclass Gauge {\n    constructor(driver) {\n        this.canvas = new Canvas_1.Canvas(driver);\n        // animation config\n        this.ringGraphDisplayedValue = 0;\n        this.value = 0;\n        this.lastValueUpdateTick = Timer_1.Timer.getTicks();\n        this.minimum = 0;\n        this.maximum = 200;\n        this.targetMinimum = 90;\n        this.targetMaximum = 110;\n        this.ringGraphValueIncrementInterval = 1;\n        this.ringGraphAnimationTimer = new Timer_1.Timer(15);\n        this.ringGraphAnimationTimer.EventHandler = this.ringGraphAnimationEventHandler.bind(this);\n        // default the gauge background\n        this.gradient = new Gradient_1.LinearGradient(0, this.canvas.height, this.canvas.width, 0);\n        this.gradient.addColorStop(0, Gauge.BackColor1);\n        this.gradient.addColorStop(.8, Gauge.BackColor2);\n        // default font style\n        this.font = new Font_1.Font('Arial', `${Math.ceil(this.canvas.width * 12 / 260)}px`, 'lighter');\n        // default ringGraph graph settings\n        this.ringGraphAngleRange = new Tuple_1.Tuple(-145, 55);\n        this.ringGraphLabelCount = 5;\n        this.ringGraphOrigin = new Tuple_1.Tuple(this.canvas.width * 0.4, this.canvas.height * 0.55);\n        this.ringGraphRadius = this.canvas.width * 0.4;\n        this.ringGraphUnitLabel = 'Watts';\n        // default line graph settings\n        this.lineGraphOrigin = new Tuple_1.Tuple(this.canvas.width * 0.1, this.canvas.height * 0.55);\n        this.lineGraphLength = this.canvas.width * 0.6;\n        this.lineGraphThickness = 1; //Math.ceil(this.canvas.width * (2 / 260));\n        this.lineGraphMaxHeight = this.canvas.height * 0.2;\n        this.lineGraphMaxMagnitude = (this.maximum - this.minimum) / 2;\n        this.lineGraphCenterValue = this.maximum - (this.maximum - this.minimum) / 2;\n        this.lineGraphUpdateInterval = 2000;\n        this.lineGraphUpdateTimer = new Timer_1.Timer(this.lineGraphUpdateInterval);\n        this.lineGraphUpdateTimer.EventHandler = this.lineGraphUpdateEventHandler.bind(this);\n        this.lineGraphUpdateTimer.Enabled = true;\n        // setup line graph values\n        this.lineGraphValue = 0;\n        this.lineGraphDisplayValueCount = Math.round(this.lineGraphLength);\n        this.lineGraphDisplayValues = [];\n        this.draw();\n    }\n    get BackgroundGradient() {\n        return this.gradient;\n    }\n    set BackgroundGradient(gradient) {\n        this.gradient = gradient;\n    }\n    get Font() {\n        return this.font;\n    }\n    set Font(font) {\n        this.font = font;\n    }\n    set Label(label) {\n        this.ringGraphUnitLabel = label;\n    }\n    get RingGraphUnitLabel() {\n        return this.ringGraphUnitLabel;\n    }\n    set RingGraphUnitLabel(label) {\n        this.ringGraphUnitLabel = label;\n    }\n    get Value() {\n        return this.value;\n    }\n    set Value(value) {\n        this.updateLineGraphAverageValue();\n        this.value = value;\n        this.ringGraphAnimationTimer.Enabled = true;\n    }\n    get Minimum() {\n        return this.minimum;\n    }\n    set Minimum(value) {\n        this.minimum = value;\n        this.ringGraphAnimationTimer.Enabled = true;\n    }\n    get Maximum() {\n        return this.maximum;\n    }\n    set Maximum(value) {\n        this.maximum = value;\n        this.ringGraphAnimationTimer.Enabled = true;\n    }\n    get TargetMinimum() {\n        return this.targetMinimum;\n    }\n    set TargetMinimum(value) {\n        this.targetMinimum = value;\n        this.ringGraphAnimationTimer.Enabled = true;\n    }\n    get TargetMaximum() {\n        return this.targetMaximum;\n    }\n    set TargetMaximum(value) {\n        this.targetMaximum = value;\n        this.ringGraphAnimationTimer.Enabled = true;\n    }\n    get MaximumMagnutide() {\n        return this.lineGraphMaxMagnitude;\n    }\n    set MaximumMagnutide(value) {\n        this.lineGraphMaxMagnitude = value;\n        this.ringGraphAnimationTimer.Enabled = true;\n    }\n    get CenterValue() {\n        return this.lineGraphCenterValue;\n    }\n    set CenterValue(value) {\n        this.lineGraphCenterValue = value;\n        this.ringGraphAnimationTimer.Enabled = true;\n    }\n    ringGraphAnimationEventHandler() {\n        this.updateRingGraph();\n        this.draw();\n    }\n    lineGraphUpdateEventHandler() {\n        this.updateLineGraph();\n        this.draw();\n    }\n    updateLineGraphAverageValue() {\n        this.lineGraphValue += this.value * Timer_1.Timer.getTicksDiff(this.lastValueUpdateTick);\n        this.lastValueUpdateTick = Timer_1.Timer.getTicks();\n    }\n    clearLineGraphAverageValue() {\n        this.lineGraphValue = 0;\n        this.lastValueUpdateTick = Timer_1.Timer.getTicks();\n    }\n    updateLineGraph() {\n        this.updateLineGraphAverageValue();\n        this.lineGraphDisplayValues.unshift(this.lineGraphValue / this.lineGraphUpdateInterval);\n        this.clearLineGraphAverageValue();\n        if (this.lineGraphDisplayValues.length > this.lineGraphDisplayValueCount) {\n            this.lineGraphDisplayValues.pop();\n        }\n    }\n    updateRingGraph() {\n        this.value = Gauge.getBoundValue(new Tuple_1.Tuple(this.minimum, this.maximum), this.value);\n        if (this.ringGraphDisplayedValue != this.value) {\n            let sign = this.value < this.ringGraphDisplayedValue ? -1 : 1;\n            let interval = this.ringGraphValueIncrementInterval * sign;\n            this.ringGraphDisplayedValue += interval;\n        } else {\n            this.ringGraphAnimationTimer.Enabled = false;\n        }\n        if (this.ringGraphDisplayedValue < this.minimum || this.ringGraphDisplayedValue > this.maximum) {\n            this.ringGraphDisplayedValue = this.value;\n        }\n        if (Math.abs(this.ringGraphDisplayedValue - this.value) < this.ringGraphValueIncrementInterval) {\n            this.ringGraphDisplayedValue = this.value;\n        }\n    }\n    draw() {\n        this.clear();\n        this.drawCircleMeter();\n        this.drawLineGraph();\n    }\n    // clear canvas and draw base (fixed) Gauge elements\n    clear() {\n        this.canvas.fillCanvas(this.gradient);\n    }\n    drawCircleMeter() {\n        const firstLabelValue = Gauge.getNearest10th(this.minimum);\n        const ringGraphValueIncrement = Gauge.getRingLabelIncrement(new Tuple_1.Tuple(this.minimum, this.maximum), this.ringGraphLabelCount);\n        const ringGraphAngleIncrement = (this.ringGraphAngleRange.v2 - this.ringGraphAngleRange.v1) / this.ringGraphLabelCount;\n        const ringGraphDisplayValue = Gauge.getAngleFromValue(this.ringGraphAngleRange, new Tuple_1.Tuple(this.minimum, this.maximum), this.ringGraphDisplayedValue);\n        const ringGraphDisplayColor = Gauge.getRingColor(new Tuple_1.Tuple(this.targetMinimum, this.targetMaximum), this.ringGraphDisplayedValue);\n        const ringGraphTargetLowAngle = Gauge.getAngleFromValue(this.ringGraphAngleRange, new Tuple_1.Tuple(this.minimum, this.maximum), this.targetMaximum);\n        const ringGraphTargetHightAngle = Gauge.getAngleFromValue(this.ringGraphAngleRange, new Tuple_1.Tuple(this.minimum, this.maximum), this.targetMinimum);\n        // draw ring graph target area, background, and value arcs.\n        this.canvas.drawArc(this.ringGraphOrigin.v1, this.ringGraphOrigin.v2, this.ringGraphRadius, ringGraphTargetLowAngle, ringGraphTargetHightAngle, Gauge.TargetColor, this.canvas.width * (9 / 260));\n        this.canvas.drawArc(this.ringGraphOrigin.v1, this.ringGraphOrigin.v2, this.ringGraphRadius, this.ringGraphAngleRange.v1, this.ringGraphAngleRange.v2, ringGraphDisplayColor, this.canvas.width * (5 / 260));\n        this.canvas.drawArc(this.ringGraphOrigin.v1, this.ringGraphOrigin.v2, this.ringGraphRadius, this.ringGraphAngleRange.v1, ringGraphDisplayValue, '#000', this.canvas.width * (3 / 260));\n        // draw ringGraph labels\n        this.canvas.writeText(this.canvas.width * 0.82, this.canvas.height * 0.9, this.font, Gauge.TextColor, this.ringGraphUnitLabel);\n        for (let i = 0; i < this.ringGraphLabelCount; i++) {\n            const label = (firstLabelValue + ringGraphValueIncrement * i).toString();\n            const labelLocation = Gauge.getRingLabelLocation(this.ringGraphOrigin, this.ringGraphRadius * 1.125, this.ringGraphAngleRange.v2 - ringGraphAngleIncrement * i);\n            this.canvas.writeText(labelLocation.v1, labelLocation.v2, this.font, Gauge.TextColor, label);\n        }\n    }\n    drawLineGraph() {\n        this.canvas.drawLine(this.lineGraphOrigin.v1, this.lineGraphOrigin.v2, this.lineGraphOrigin.v1 + this.lineGraphLength, this.lineGraphOrigin.v2, Gauge.LineColor, this.lineGraphThickness);\n        let prevPoint = null;\n        this.lineGraphDisplayValues.forEach((displayValue, index) => {\n            const x = this.lineGraphOrigin.v1 + this.lineGraphLength - index;\n            displayValue = Gauge.getBoundValue(new Tuple_1.Tuple(this.lineGraphCenterValue - this.lineGraphMaxMagnitude, this.lineGraphCenterValue + this.lineGraphMaxMagnitude), displayValue);\n            const graphOffset = Gauge.getLineOffsetFromValue(this.lineGraphMaxHeight, this.lineGraphMaxMagnitude, this.lineGraphCenterValue, displayValue);\n            const y = this.lineGraphOrigin.v2 - graphOffset; // invert so up is positive\n            if (prevPoint !== null) {\n                const fillColor = displayValue > this.targetMaximum || displayValue < this.targetMinimum ? Gauge.RedColor : Gauge.GreenColor;\n                this.canvas.drawLine(x, this.lineGraphOrigin.v2, x, y, fillColor, 1);\n                this.canvas.drawLine(prevPoint.v1, prevPoint.v2, x, y, Gauge.LineColor, this.lineGraphThickness);\n            }\n            prevPoint = new Tuple_1.Tuple(x, y);\n        });\n        // draw target lines\n        const targetMaxOffset = Gauge.getLineOffsetFromValue(this.lineGraphMaxHeight, this.lineGraphMaxMagnitude, this.lineGraphCenterValue, this.targetMaximum);\n        const targetMinOffset = Gauge.getLineOffsetFromValue(this.lineGraphMaxHeight, this.lineGraphMaxMagnitude, this.lineGraphCenterValue, this.targetMinimum);\n        this.canvas.drawLine(this.lineGraphOrigin.v1, this.lineGraphOrigin.v2 + targetMaxOffset, this.lineGraphOrigin.v1 + this.lineGraphLength, this.lineGraphOrigin.v2 + targetMaxOffset, Gauge.TargetColor, 1);\n        this.canvas.drawLine(this.lineGraphOrigin.v1, this.lineGraphOrigin.v2 + targetMinOffset, this.lineGraphOrigin.v1 + this.lineGraphLength, this.lineGraphOrigin.v2 + targetMinOffset, Gauge.TargetColor, 1);\n    }\n    static getBoundValue(minMax, value) {\n        if (value > minMax.v2) {\n            return minMax.v2;\n        }\n        if (value < minMax.v1) {\n            return minMax.v1;\n        }\n        return value;\n    }\n    static getLineOffsetFromValue(maxHeight, maxMagnitude, centerValue, value) {\n        return (value - centerValue) * (maxHeight / maxMagnitude);\n    }\n    static getAngleFromValue(angleRange, valueRange, value) {\n        return (valueRange.v2 - value) * (angleRange.v2 - angleRange.v1) / (valueRange.v2 - valueRange.v1) + angleRange.v1;\n    }\n    static getRingColor(ringGraphValueRange, value) {\n        const range = ringGraphValueRange.v2 - ringGraphValueRange.v1;\n        let color = Gauge.RingGraphColor;\n        if (value < ringGraphValueRange.v1) {\n            color = Gauge.RedColor;\n        } else if (value > ringGraphValueRange.v2) {\n            color = Gauge.GreenColor;\n        }\n        return color;\n    }\n    static getRingLabelLocation(origin, radius, angle) {\n        const x = radius * Math.cos(Util_1.Util.d2r(angle)) + origin.v1;\n        const y = radius * Math.sin(Util_1.Util.d2r(angle)) + origin.v2;\n        return new Tuple_1.Tuple(x, y);\n    }\n    static getRingLabelIncrement(ringGraphValueRange, ringGraphLabelCount) {\n        const range = ringGraphValueRange.v2 - ringGraphValueRange.v1;\n        let increment = range / ringGraphLabelCount;\n        increment = Gauge.getNearest10th(increment);\n        return increment;\n    }\n    static getNearest10th(value) {\n        return Math.round(value / 10) * 10;\n    }\n}\nexports.default = Gauge;\nGauge.RingGraphColor = '#fe9440';\nGauge.TextColor = '#eeeeee';\nGauge.BackColor1 = '#fe5c00';\nGauge.BackColor2 = '#000000';\nGauge.LineColor = '#fe9440';\nGauge.GreenColor = '#5a9132';\nGauge.RedColor = '#a32c08';\nGauge.TargetColor = '#eeeeee';\n//# sourceMappingURL=Gauge.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ColorStop = exports.LinearGradient = void 0;\nclass LinearGradient {\n    constructor(x0, y0, x1, y1) {\n        this.x0 = x0;\n        this.y0 = y0;\n        this.x1 = x1;\n        this.y1 = y1;\n        this.radial = false;\n        this.colorStops = new Array();\n    }\n    addColorStop(offset, color) {\n        this.colorStops.push(new ColorStop(offset, color));\n    }\n}\nexports.LinearGradient = LinearGradient;\nclass ColorStop {\n    constructor(offset, color) {\n        this.offset = offset;\n        this.color = color;\n        if (this.offset < 0) {\n            offset = 0;\n            console.warn('Offset cannot be less than 0. Defaulting to 0.');\n        }\n        if (this.offset > 1) {\n            offset = 1;\n            console.warn('Offset cannot be greater than 1. Defaulting to 1.');\n        }\n    }\n}\nexports.ColorStop = ColorStop;\n//# sourceMappingURL=Gradient.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Gauge_1 = require(\"./Gauge/Gauge\");\nconst Tuple_1 = require(\"./Common/Tuple\");\nconst Timer_1 = require(\"./Common/Timer\");\nconst Context2DDriver_1 = require(\"./Drivers/Context2DDriver\");\nconst gauges = [];\nconst range = [new Tuple_1.default(0, 400), new Tuple_1.default(0, 200)];\nconst target = [new Tuple_1.default(100, 150), new Tuple_1.default(60, 110)];\nconst center = [125, 85];\nconst label = ['Watts', '°C'];\nfor (let i = 1; i <= 2; i++) {\n    const canvas = document.getElementById('canvas' + i);\n    const ctx = canvas.getContext('2d');\n    const gauge = new Gauge_1.default(new Context2DDriver_1.Context2DDriver(ctx, canvas.width, canvas.height));\n    // shrink line graph range to emphasize target zone\n    gauge.MaximumMagnutide = (gauge.Maximum - gauge.Minimum) / 4;\n    gauge.Minimum = range[i - 1].v1;\n    gauge.Maximum = range[i - 1].v2;\n    gauge.TargetMinimum = target[i - 1].v1;\n    gauge.TargetMaximum = target[i - 1].v2;\n    gauge.CenterValue = center[i - 1];\n    gauge.Value = 100;\n    gauge.Label = label[i - 1];\n    gauges.push(gauge);\n}\nnew Timer_1.default(50, () => {\n    gauges.forEach(gauge => {\n        let newVal = gauge.Value + (Math.random() - 0.5) * 2;\n        if (newVal < gauge.Minimum + 20) newVal += (gauge.Maximum - gauge.Minimum) / 2;\n        if (newVal > gauge.Maximum - 20) newVal -= (gauge.Maximum - gauge.Minimum) / 2;\n        gauge.Value = newVal;\n    });\n}, true);\n//# sourceMappingURL=index.js.map"],"names":["Object","defineProperty","exports","value","Timer","constructor","interval","eventHandler","enabled","this","handle","Enabled","console","log","Interval","startTimer","endTimer","EventHandler","window","setInterval","clearInterval","static","Date","now","ticks","Tuple","val1","val2","v1","v2","Util","degree","Math","PI","Context2DDriver","Util_1","ctx","width","height","translate","fillCanvas","gradient","ctxGradient","radial","createRadialGradient","x0","y0","r0","x1","y1","r1","createLinearGradient","colorStops","forEach","stop","addColorStop","offset","color","fillStyle","fillRect","drawLine","thickness","beginPath","strokeStyle","lineWidth","globalAlpha","moveTo","lineTo","stroke","drawArc","x","y","radius","startAngle","endAngle","arc","d2r","writeText","font","text","weight","fontsize","typename","fillText","Font","Canvas","driver","round","ceil","Gradient_1","Font_1","Tuple_1","Canvas_1","Timer_1","Gauge","canvas","ringGraphDisplayedValue","lastValueUpdateTick","getTicks","minimum","maximum","targetMinimum","targetMaximum","ringGraphValueIncrementInterval","ringGraphAnimationTimer","ringGraphAnimationEventHandler","bind","LinearGradient","BackColor1","BackColor2","ringGraphAngleRange","ringGraphLabelCount","ringGraphOrigin","ringGraphRadius","ringGraphUnitLabel","lineGraphOrigin","lineGraphLength","lineGraphThickness","lineGraphMaxHeight","lineGraphMaxMagnitude","lineGraphCenterValue","lineGraphUpdateInterval","lineGraphUpdateTimer","lineGraphUpdateEventHandler","lineGraphValue","lineGraphDisplayValueCount","lineGraphDisplayValues","draw","BackgroundGradient","Label","label","RingGraphUnitLabel","Value","updateLineGraphAverageValue","Minimum","Maximum","TargetMinimum","TargetMaximum","MaximumMagnutide","CenterValue","updateRingGraph","updateLineGraph","getTicksDiff","clearLineGraphAverageValue","unshift","length","pop","getBoundValue","sign","abs","clear","drawCircleMeter","drawLineGraph","firstLabelValue","getNearest10th","ringGraphValueIncrement","getRingLabelIncrement","ringGraphAngleIncrement","ringGraphDisplayValue","getAngleFromValue","ringGraphDisplayColor","getRingColor","ringGraphTargetLowAngle","ringGraphTargetHightAngle","TargetColor","TextColor","i","toString","labelLocation","getRingLabelLocation","LineColor","prevPoint","displayValue","index","graphOffset","getLineOffsetFromValue","fillColor","RedColor","GreenColor","targetMaxOffset","targetMinOffset","minMax","maxHeight","maxMagnitude","centerValue","angleRange","valueRange","ringGraphValueRange","RingGraphColor","origin","angle","cos","sin","increment","ColorStop","Array","push","warn","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","module","__webpack_modules__","Gauge_1","Context2DDriver_1","gauges","range","default","target","center","document","getElementById","getContext","gauge","newVal","random"],"sourceRoot":""}